!head jffam learn jffam "JFFAM: rule creation using a cellular automat"

!ind jffam
!ind "Cellular automat"
!ind "FAM, create from data"
JFFAM is a rule generator. It replaces an 'extern' statement in a compiled
jfs-program with a set of 'if' statements. The
statements are generated from a file with sample input and output values.
<BR>
JFFAM replaces an extern-statement of the form:
<PRE>
     extern jfrd input [-<opt>] <vname_1> [-<opt>] <vname_2> .... output [-<opt>] <vname>;
</PRE>
with 'if' statements of the form (the <opt>-arguments are ignored by JFFAM):
<PRE>
     if <vname_1> <adj> and <vname_2> <adj> ... then <vname> <adj>;
</PRE>
or of the form:
<PRE>
     if <vname_1> <adj> and <vname_2> <adj> ... then <vname>=<value>;
</PRE>
where the 'if' statements are generated from the input/output values in a
training-file.
<P>
JFFAM creates one rule for each combination of fuzzy variables
bound to domain variables specified in the 'input' part of the 'extern jfrd' 
statement (a Fuzzy Associative Memory).
<BR>
For example: let 'speed' and 'distance' be the
input variables to a typical fuzzy controller, and let 'brake_force' be the
output variable. Assume the fuzzy variables are:
<PRE>
     'speed low', 'speed high',
     'distance far', 'distance close', 'distance none',
     'brake_force none, 'brake_force normal' and 'brake_force high'.
</PRE>
From a data file with samples of correct braking force for given speed and
distance values, JFFAM replaces the statement:
<PRE>
	extern jfrd input speed distance output brake_force;
</PRE>
with a rule for each of the 6 combinations of fuzzy variables. The statements
could be:
<PRE>
        if speed low and distance far then brake_force none;
        if speed low and distance close then brake_force normal;
        if speed low and distance none  then brake_force normal;
        if speed high and distance far then brake_force normal;
        if speed high and distance close then brake_force normal;
        if speed high and distance none then brake_force high;
</PRE>
The rules are created by a two-step method. First rules are created from the data
in the data file by the Wang-Mendel-method (see
!ref learn_meth_WM
 for details). Second a cellular automat is
used to create the missing rules (i.e., whatever rules in the FAM that where
not created during the first step).
<P>
In the example perhaps only the rules:
<PRE>
        if speed low and distance far then brake_force none;
        if speed high and distance none then brake_force high;
</PRE>
were created by the Wang-Mendel method (the first). The missing rules are created
by a N-dimensional cellular automata, where 'N' is the number of variables
in the input block of the 'extern jfrd' statement (N=2 in the example).
First the WM-generated rules are inserted as
fixed cells in the automata. Then the cellular automata is run for a fixed
number of steps (or until a stable state is reached). The values of the
non-fixed cells are calculated as the average of its neighbour cells (variants
of this method can be specified by an option).
<P>
JFFAM supports an alternative to placing the the generated rules as
 'if' statements in the program: the rules can be written to a data file
that can later be used by the programs JFRD and JFID3,
to reduce the number of generated rules.
<P>
If the number of input variables in
the 'extern jfrd' statement is two, then the FAM is also written to the file
in a tabular form (in comment lines).
<P>
The data file read by JFFAM must be a field-separated ascii-file (see
!ref prog_input 
for details).
<P>
JFFAM comes with several sample jfs-programs. See:
!ref ap_examples
.

!head jffam_options jffam options "Running JFFAM from the command line"

To invoke JFFAM from the command line type 'jffam' at the prompt followed
by a list of command line arguments. The syntax is:
<PRE>
      jffam {<option>} <jfrf>
</PRE>
where <jfrf> is the filename of a compiled jfs-program containing a line of
the form:
<PRE>
      extern jfrd input {<vname>} output <vname>;
</PRE>
If JFFAM is called without options, then data is read from the file <jfrf>.dat,
and the changed program is written to <jfrf> (overwriting its original
contents).
<P>
JFFAM accepts the options:
<P>
!dtab jffam_options "Options"
!tab jffam_options -f
-f <fs>
!etc
 <fs> is a string of characters. The characters are used as
extra field-separators in the data-file.
!etab
!tab jffam_options -D
-D <dam>
!etc
Data file order. <dam> one of:
<BR>'ie' : input values before expected values,
<BR>'ei' : expected values  before input values,
<BR>'tie': identifier before input before expected,
<BR>'tei': identifier before expected before input,
<BR>'iet': input values before expected values before identifier,
<BR>'eit': expected values before input values before identifier,
<BR>'f'  : the order of the variables are taken from the variable-names
in the first line.
<BR>See
!ref prog_input
for details.
!etab
!tab jffam_options -d
-d <df>
!etc
Read training data from the file <df>. If no extension is specified,
'.dat' is added to filename.
!etab
!tab jffam_options -o
-o <of>
!etc
Write the changed jfs-program to the file <of>. If no extension
is specified, '.jfr' is added to the file-name.
<BR>
If both the '-o' and the '-rf' option is specified, the generated
FAM is written both to a data file and to a program.
!etab
!tab jffam_options -rf
-rf <rf>
!etc
Write the generated rules to the data file <rf>. If no extension
is specified, '.dat' is added to the file name.
!etab
!tab jffam_options -Mp
-Mp <pb>
!etc
Allocate <pb> K extra memory to the jfs-program (the space is
used to the new rules). Default is 20. (Maximum is
64 - programsize).
!etab
!tab jffam_options -Md
-Md <db>
!etc
Allocate <db> K to rules. Default is 5.
!etab
!tab jffam_options -r
-r <rm>
!etc
The method used by the Cellular automata to calculate the values of
not-fixed cells. <rm> is one of 'a', 'm' and 'd':
<BR>
 <rm>='a' means average: The value of a cell is calculated as the
average of its neighbour-cells.
<BR>
 <rm>='m' means avg(min,max): The value of a cell is the average of
the minimum and the maximum of its neighbour cells.
<BR>
 <rm>='d' means avg(delta): The cell's value is calculated as the average
of the line-values starting in its neighbour cells.
<P>
The default method is 'a'.
!etab
!tab jffam_options -iw
-iw <wgt>
!etc
Generate if-rules of the type 'ifw %<wgt> ... '.
!etab
!tab jffam_options -tt
-tt <t>
!etc
Statement-type:
<BR>
 <t>='a' means: Create statements of the type 'if <expr> then <var> <adjectiv>;'
<BR>
 <t>='c' means: Create statements of the type 'if <expr> then <var>=%<c>;'
where <c> is the center-value of an adjectiv bound to <var>.
<P>
The default is 'a'.
!etab
!tab jffam_options -c
-c <cr>
!etc
Conflict-resolve:
<BR>
 <cr>=s means score; select the rule closest to an adjectives center
<BR>
 <cr>=c: means count: select the rule with the highest number of supporting
data instances.
<P>
default is 's'.
!etab
!tab jffam_options -ms
-ms <s>
!etc
 <s> is the maximum number of steps the cellular automata is
run. By default <s>=100.
!etab
!tab jffam_options -nf
-nf
!etc
No fixed cells in cellular automata (the cells generated from the
data file are changed).
!etab
!tab jffam_options -so
-so <of>
!etc
Write messages to the file <of> instead of writing them to standard output
 (i.e., the screen).
!etab
!tab jffam_options -a
-a
!etc
Append messages to the file specified with '-so' (instead of overwriting it).
!etab
!tab jffam_options -w
-w
!etc
Wait for the user to press the 'return' key before exiting the program.
!etab

!head jffam_jfs_opts jffam options "Running JFFAM from JFS"
!if !UNIX
Invoke JFFAM from the program JFS by choosing 'jffam' from the tool menu,
or select 'jffam' in the option screen and press the 'Runtool' button.
The current jfs-progam has to contain a line of the form:
<PRE>
      extern jfrd input {<vname>} output <vname>;
</PRE>
The JFRD template  can be used to create the extern statement
(select 'RUle Discover' in the template menu of the code window).
<P>
JFFAM accepts the options:
<P>

!dtab jffam_jfs_opts "Options"
!tab jffam_jfs_opts -f
Data separators
!etc
use the specified characters as extra field separators in the data file.
!etab
!tab jffam_jfs_opts -D
Data order
!etc
data order in the data file. One of:
<BR><STRONG>input_expected:</STRONG> input values before expected values,
<BR><STRONG>expected_input:</STRONG> expected values  before input values,
<BR><STRONG>text_input_expected:</STRONG> identifier before input before expected,
<BR><STRONG>text_expected_input:</STRONG> identifier before expected before input,
<BR><STRONG>input_expected_text:</STRONG> input values before expected values before identifier,
<BR><STRONG>expected_input_text:</STRONG> expected values before input values before identifier,
<BR><STRONG>first_line:</STRONG> the order of the variables are taken from the variable-names
!etab
!tab jffam_jfs_opts -d
Data file
!etc
Read training data from the specified file.
!etab
!tab jffam_jfs_opts -o
Destination file
!etc
Write the changed jfs-program to the specified file.
!etab
!tab jffam_jfs_opts -rf
Output data file
!etc
Write the generated rules to the specified data file.
!etab
!tab jffam_jfs_opts -Mp
Alloc to program
!etc
Allocate the specified amount of extra memory (in Kilobytes) to the
jfs-program (the space is used to the new rules).
!etab
!tab jffam_jfs_opts -Md
Alloc K to data
!etc
Allocate the specified amount of memory (in kilobytes) to rules.
!etab
!tab jffam_jfs_opts -r
CA method
!etc
Method used by the Cellular automata to calculate the values of
not-fixed cells.
<BR><STRONG>avg:</STRONG>
The value of a cell is calculated as the average of its neighbour cells.
<BR><STONG>minmax:</STRONG>
The value of a cell is the
average of the minimum and the maximum of its neighbour cells.
<BR><STRONG>delta:</STRONG>
The cell's value is calculated as the average
of the line-values starting in its neighbour cells.
!etab
!tab jffam_jfs_opts -iw
Create ifw-statements
!etc
If a values is specified then generate if-rules of the type 'ifw %<wgt> ... ',
 where <wgt> is the specified value.
!etab
!tab jffam_jfs_opts -tt
Statement-type
!etc
<STRONG>adjectiv:</STRONG>
Create statements of the type 'if <expr> then <var> <adjectiv>;'
<BR><STRONG>center:</STRONG>
Create statements of the type 'if <expr> then <var>=%<c>;'
where <c> is the center-value of an adjectiv bound to <var>.
!etab
!tab jffam_jfs_opts -c
Conflict resolve
!etc
<STRONG>score:</STRONG>
Select the rule closest to an adjective's center
<STRONG>count:</STRONG>
Select the rule with the highest number of supporting data instances
!etab
!tab jffam_jfs_opts -ms
Max number ca-steps
!etc
Specify the maximum number of steps the cellular automata is run.
!etab
!tab jffam_jfs_opts -nf
Free rules
!etc
<STRONG>yes:</STRONG>
The cells generated from the data file by the WM-method are changed (no
fixed rules)
<BR><STRONG>no:</STRONG>
The cells generated from the data file are fixed.
!etab
!tab jffam_jfs_opts -so
Redirect stdout to
!etc
write messages to the file specified here instead of writing them to
standard output (the screen).
!etab
!tab jffam_jfs_opts -a
Append to stdout
!etc
<STRONG>yes:</STRONG>
Append messages to the file specified with 'Redirect stdout to',
<BR>no:</STRONG>
Overwrite the file specified with 'Redirect stdout to'.
!etab
!tab jffam_jfs_opts -w
Wait for return
!etc
<STRONG>yes:</STRONG>
Wait for the user to press the 'return' key before exiting the program.
<BR><STRONG>no:</STRONG>
Don't wait.
!etab
!tab jffam_jfs_opts so
Source file
!etc
specify the name of the compiled jfs-program to be changed.
!etab

!endif
!head jffam_limits jffam limitations "Limitations"
<P>
!dlist jffam_lims
!li jffam_lims 1
The maximum number of variables in the 'extern jfrd' statement is 10.
!eli
!li jffam_lims 2
Only one 'extern jfrd'-statement in the jfs-program.
!eli
!li jffam_lims 3
Primitive handling of unknown values ('?' in the data file).
!eli

!head jffam_v2 jffam changes "Changes in JFFAM version 2"

!li intro_changes jffam
!ref jfrd_v2 "Changes in JFFAM"
!eli
<P>
Changes in JFFAM version 2.03:
<UL>
<LI>
JFFAM now accepts the data order specified by the first line and data files
with an identifier.
</UL>
<P>
Changes in JFFAM version 2.01:
!dlist jffam_v2.01
!li jffam_v2.01 1
A memory-allocation-bug is fixed.
!eli
!li jffam_v2.01 2
The program is recompiled with speed-optimization.
!eli
!li jffam_v2.01 3
JFFAM now accepts (but ignores) the extended syntax of the 'extern jfrd'-statement.
!eli

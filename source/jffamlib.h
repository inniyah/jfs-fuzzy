
  /**************************************************************************/
  /*                                                                        */
  /* jffamlib.h   Version  2.03  Copyright (c) 1998-2000 Jan E. Mortensen   */
  /*                                                                        */
  /* JFS Fam-creation by a cellular automat.                                */
  /*                                                                        */
  /* by Jan E. Mortensen     email:  jemor@inet.uni2.dk                     */
  /*    Lollandsvej 35 3.tv.                                                */
  /*    DK-2000 Frederiksberg                                               */
  /*    Denmark                                                             */
  /*                                                                        */
  /**************************************************************************/

int jffam_run(char *op_fn, char *ip_fn, char *ru_fn, char *da_fn,
              char *field_sep, int data_mode, long prog_size, long data_size,
              int res_confl, int ca_rule, float weight_val, int then_type,
              int fixed, int steps,
              char *sout_fname, int append, int batch);

/* Replaces a statement of the type 'extern jfrd input {<iv>} output <ovn>' */
/* in the compiled jfs-program <ip_fn> with rules (a FAM) generated from    */
/* the ascii-data-file <da_fn> using wang-medel-reduction and a cellular    */
/* automat. The changed  program is written to <op_fn> (if <op_fn>=="" no   */
/* changes are written.                                                     */
/* Parameters:                                                              */
/* ru_fn       : write the FAM as a data-file to the file with the name     */
/*               <ru_fn> (if <ru_fn>=="" nothing is written).               */
/* field_sep   : Use the characters in <field_sep> as field-separators in   */
/*               the data-file.                                             */
/* data_mode   : data order in data-file. One of:                           */
/*                 JFT_FM_INPUT_EXPECTED, JFT_FM_INPUT_EXPECTED_KEY,        */
/*                 JFT_FM_EXPECTED_INPUT, JFT_FM_EXPECTED_INPUT_KEY,        */
/*                 JFT_FM_KEY_INPUT_EXPECTED, JFT_FM_KEY_EXPECTED_INPUT,    */
/*                 JFT_FM_FIRST_LINE.                                       */
/* prog_size   : Allocate <progsize> extra bytes to the program.            */
/* data_size   : Allocate <data_size> bytes to data.                        */
/* res_confl   : Method to resolve data-conflicts:                          */
/*               <res_confl>==0: resolve by score,                          */
/*                          ==1: resolve by count.                          */
/* ca_rule     : Cellular automat method:                                   */
/*               <ca_rule>==0: avg,                                         */
/*                        ==1: avg(min,max),                                */
/*                        ==2: avg(delta).                                  */
/* weight_val  : if <weight_val> > 0.0 then generate rules of the form:     */
/*               'if %<weight_val> then ...'.                               */
/* then_type   : then-part of rules are of one of:                          */
/*               0: 'then <var> <adj>;',                                    */
/*               1: 'then <var> = %<adj.center>';                           */
/* fixed       : if fixed==1 then keep the rules generated by Wang-Mendel   */
/*               fixed in the cellular automat.                             */
/* steps       : Let the cellular automat run for max <steps> generations.  */
/* sout_name   : Write statistic to the file <sout_name> (if                */
/*               <sout_name>=="" then write to stdout).                     */
/* append      : if <append>==0 then overwrite <sout_name>,                 */
/*                          ==1 then append to <sout_name>.                 */
/* batch       : <batch>==0: wait for the user to press the RETURN-key,     */
/*                        1: don't wait.                                    */



